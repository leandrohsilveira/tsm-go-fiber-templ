package components

import "github.com/leandrohsilveira/tsm/util"

type ButtonVariant string

const (
	ButtonVariantRaised   ButtonVariant = "raised"
	ButtonVariantOutlined ButtonVariant = "outlined"
	ButtonVariantSoft     ButtonVariant = "soft"
	ButtonVariantClean    ButtonVariant = "clean"
)

type ButtonProps struct {
	Variant ButtonVariant
	Class   string
	Type    string
	Href    string
	Index   int
}

func defaultProps(props ButtonProps) ButtonProps {
	return ButtonProps{
		Class:   props.Class,
		Href:    props.Href,
		Index:   props.Index,
		Type:    util.ValueOrDefault(props.Type != "", props.Type, "button"),
		Variant: util.ValueOrDefault(props.Variant != "", props.Variant, ButtonVariantOutlined),
	}
}

func classes(props ButtonProps) templ.CSSClasses {
	return templ.CSSClasses{
		"rounded-md py-2 px-4 cursor-pointer border border-solid",
		props.Class,
		templ.KV("border-primary bg-primary text-on-primary hover:border-primary-highlight hover:text-on-primary-highlight hover:bg-primary-highlight", props.Variant == ButtonVariantRaised),
		templ.KV("border-primary/30 bg-primary/30 text-on-primary hover:border-primary-muted/30 hover:bg-primary-muted/30 hover:text-on-primary-muted", props.Variant == ButtonVariantSoft),
		templ.KV("border-primary text-primary hover:border-primary-highlight hover:bg-primary/30 hover:text-on-primary", props.Variant == ButtonVariantOutlined),
		templ.KV("border-none text-primary hover:border-primary/30 hover:bg-primary/30 hover:text-on-primary", props.Variant == ButtonVariantClean),
	}

}

templ Button(props ButtonProps) {
	{{ props = defaultProps(props) }}
	if props.Type == "link" {
		<a class={ classes(props) } href={ templ.URL(props.Href) } tabindex={ props.Index }>
			{ children... }
		</a>
	} else {
		<button class={ classes(props) } type={ props.Type } tabindex={ props.Index }>
			{ children... }
		</button>
	}
}
